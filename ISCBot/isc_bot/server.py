# ISCBot. Telegram school helper for students.
# Copyright (C) 2021 Artem Vorochaev (vorochaev2004@live.ru, github.com/Hymiside)
#                    Artem Voronov (mreluzium@mail.ru, github.com/MrEluzium)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import time
import logging
import random
import string

from aiogram import Bot, Dispatcher, types, executor

from utils import *
import logic

bot = Bot(token='')
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands='menu')
@dp.message_handler(commands='start')
async def new_send_welcome(message: types.Message):
    user_id = message.from_user.id
    user_status = logic.check_user_profile(user_id)

    if user_status:
        await message.answer('üì±–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫üëá',
                             reply_markup=keyboard.main_keyboard())

    elif not user_status:
        username = message.from_user.username
        if username is not None:
            await message.answer(
                f'üôã‚Äç‚ôÇÔ∏è–ü—Ä–∏–≤–µ—Ç, {username}!\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–ª–∞—Å—Å–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —É—á–∏—à—å—Å—è. –ï—Å–ª–∏ —Ç–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞'
                f' –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.',
                reply_markup=keyboard.all_schools(db.return_all_schools()))
        else:
            await message.answer(
                f'üôã‚Äç‚ôÇÔ∏è–ü—Ä–∏–≤–µ—Ç!\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–ª–∞—Å—Å–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —É—á–∏—à—å—Å—è. –ï—Å–ª–∏ —Ç–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞'
                f' –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.',
                reply_markup=keyboard.all_schools(db.return_all_schools()))


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('cls'))
async def registration(callback_query: types.CallbackQuery):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    school_id = int(callback_query.data[3:])
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username

    logic.add_user_profile(username, school_id, user_id)
    return await callback_query.message.answer(
        'ü§ç–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!ü§ç\n\nüì±–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫üëá',
        reply_markup=keyboard.main_keyboard())


@dp.callback_query_handler(text='add_homework')
async def add_homework(callback_query: types.CallbackQuery):
    """–õ–æ–≤–∏–º –∫–æ–ª–ª–±—ç–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è—Ç—å –î–ó"""
    user_id = callback_query.from_user.id
    role = logic.check_user_role(user_id)

    if role == ['–†–µ–¥–∞–∫—Ç–æ—Ä']:
        await callback_query.message.answer('üìñ–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É '
                                            '–ø—Ä–µ–¥–º–µ—Ç—Éüëá', reply_markup=keyboard.homework_keyboard())

    elif role == ['–ß–∏—Ç–∞—Ç–µ–ª—å']:
        await callback_query.message.answer('üôÖ‚Äç‚ôÇÔ∏è–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –ß–∏—Ç–∞—Ç–µ–ª—åüôÖ‚Äç‚ôÇÔ∏è\n–î–æ–±–∞–≤–∏—Ç—å –î–ó –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –†–µ–¥–∞–∫—Ç–æ—Ä!'
                                            ' –ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –†–µ–¥–∞–∫—Ç–æ—Ä–∞" –∏ '
                                            '–≤–≤–µ–¥–∏ –∫–æ–¥ –†–µ–¥–∞–∫—Ç–æ—Ä–∞. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @hymiside.',
                                            reply_markup=keyboard.main_keyboard())

    elif not role:
        await callback_query.message.answer('‚ùó–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω‚ùó\n –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã '
                                            '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')


@dp.callback_query_handler(text='russian')
@dp.callback_query_handler(text='literature')
@dp.callback_query_handler(text='algebra')
@dp.callback_query_handler(text='geometry')
@dp.callback_query_handler(text='physics')
@dp.callback_query_handler(text='informatics')
@dp.callback_query_handler(text='chemistry')
@dp.callback_query_handler(text='english')
@dp.callback_query_handler(text='biology')
@dp.callback_query_handler(text='astronomy')
@dp.callback_query_handler(text='obg')
@dp.callback_query_handler(text='history')
@dp.callback_query_handler(text='sport')
async def input_subject(callback_query: types.CallbackQuery):
    """–õ–æ–≤–∏–º –∫–æ–ª–ª–±—ç–∫ —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º –∏ –∫–ª–∞–¥–µ–º –µ–≥–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î"""
    global subject

    user_id = callback_query.from_user.id
    school_id = logic.return_school_id(user_id)

    if not school_id:
        return await callback_query.message.answer('‚ùó–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω‚ùó\n –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã '
                                                   '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')

    subjects_dict = {
        'russian': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
        'literature': '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
        'algebra': '–ê–ª–≥–µ–±—Ä–∞',
        'chemistry': '–•–∏–º–∏—è',
        'english': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫',
        'geometry': '–ì–µ–æ–º–µ—Ç—Ä–∏—è',
        'informatics': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
        'physics': '–§–∏–∑–∏–∫–∞',
        'sport': '–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞',
        'biology': '–ë–∏–æ–ª–æ–≥–∏—è',
        'astronomy': '–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
        'history': '–ò—Å—Ç–æ—Ä–∏—è',
        'obg': '–û–ë–ñ'
    }
    subject_key = callback_query.data
    subject = subjects_dict[subject_key]
    await callback_query.message.answer('üíÅ‚Äç‚ôÇÔ∏è–¢–µ–ø–µ—Ä—å –≤–≤–æ–¥–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–æ –≤ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤—å *')


@dp.message_handler(lambda message: message.text.startswith('*'))
async def input_homework(message: types.Message):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–µ–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –ë–î"""
    user_id = message.from_user.id
    homework = message.text.strip('*').strip()

    school_id = logic.return_school_id(user_id)
    logic.add_homework(subject, homework, user_id, school_id)
    return await message.answer('‚úÖ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup=keyboard.main_keyboard())


@dp.callback_query_handler(text='view_homework')
async def view_homework(callback_query: types.CallbackQuery):
    """–í—ã–≤–æ–¥–∏–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_query.from_user.id
    user_status = logic.check_user_profile(user_id)
    if not user_status:
        return await callback_query.message.answer('‚ùó–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω‚ùó\n –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã '
                                                   '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')
    school_id = logic.return_school_id(user_id)
    all_homework = logic.view_homework(*school_id)

    if not all_homework:
        return await callback_query.message.answer('üìñ–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Çüìñ\n–ö–∞–π—Ñ—É–πü§ç',
                                                   reply_markup=keyboard.main_keyboard())

    list_homework = [
        f'–ü—Ä–µ–¥–º–µ—Ç: {homework.subject}\n–ó–∞–¥–∞–Ω–∏–µ: {homework.homework}\n–ó–∞–ø–∏—Å–∞–Ω–æ: '
        f'{homework.created_at.split("-")[2]}.{homework.created_at.split("-")[1]}.{homework.created_at.split("-")[0]} '
        f'- —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å, –Ω–∞–∂–º–∏ /delete{homework.id}' for homework in all_homework]

    return await callback_query.message.answer('üìñ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µüìñ\n\n' + "\n\n".join(list_homework),
                                               reply_markup=keyboard.main_keyboard())


@dp.message_handler(lambda message: message.text.startswith('/del'))
async def delete_homework(message: types.Message):
    """–£–¥–∞–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    user_id = message.from_user.id
    role = logic.check_user_role(user_id)

    if role == ['–†–µ–¥–∞–∫—Ç–æ—Ä']:
        row_id = int(message.text[7:])
        db.get_delete_homework(row_id)
        return await message.answer('‚úÖ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', reply_markup=keyboard.main_keyboard())

    elif role == ['–ß–∏—Ç–∞—Ç–µ–ª—å']:
        return await message.answer('üôÖ‚Äç‚ôÇÔ∏è–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –ß–∏—Ç–∞—Ç–µ–ª—åüôÖ‚Äç‚ôÇÔ∏è\n–£–¥–∞–ª–∏—Ç—å –î–ó –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –†–µ–¥–∞–∫—Ç–æ—Ä!'
                                    ' –ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –†–µ–¥–∞–∫—Ç–æ—Ä–∞" –∏ '
                                    '–≤–≤–µ–¥–∏ –∫–æ–¥ –†–µ–¥–∞–∫—Ç–æ—Ä–∞. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @hymiside.',
                                    reply_markup=keyboard.main_keyboard())

    elif not role:
        return await message.answer('‚ùó–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω‚ùó\n –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã '
                                    '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')


@dp.callback_query_handler(text='enter_code')
async def enter_editor_token(callback_query: types.CallbackQuery):
    """–õ–æ–≤–∏–º –∫–æ–ª–ª–±—ç–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø–∞—Ä–Ω—é —Ç–∞–∫–∞—è –º–∞—à–∏–Ω–∞"""
    user_id = callback_query.from_user.id
    role = logic.check_user_role(user_id)

    if role == ['–ß–∏—Ç–∞—Ç–µ–ª—å']:
        await callback_query.message.answer('üíÅ‚Äç‚ôÇÔ∏è–¢–µ–ø–µ—Ä—å –≤–≤–æ–¥–∏ –∫–æ–¥ –†–µ–¥–∞–∫—Ç–æ—Ä–∞')

    elif role == ['–†–µ–¥–∞–∫—Ç–æ—Ä']:
        return await callback_query.message.answer('üôÖ‚Äç‚ôÇÔ∏è–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –†–µ–¥–∞–∫—Ç–æ—ÄüôÖ‚Äç‚ôÇÔ∏è\n –î–∞–ª—å—à–µ —Ç–æ–ª—å–∫–æ –ë–û–ì, –Ω–æ —ç—Ç–æ –Ω–µ '
                                                   '–∫–æ –º–Ω–µ)', reply_markup=keyboard.main_keyboard())

    elif not role:
        return await callback_query.message.answer('‚ùó–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω‚ùó\n –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã '
                                                   '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')


@dp.message_handler(lambda message: message.text.startswith('editor'))
async def input_editor_token(message: types.Message):
    """–õ–æ–≤–∏–º —Ç–æ–∫–µ–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º,
    —Ç–æ –ø–æ–≤—ã—à–∞–µ–º –∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç - –ø–µ—Ç—É—à–∏–º"""
    user_id = message.from_user.id
    editor_token = message.text

    data = db.return_id_and_school_id(user_id)
    id = data[0]
    school_id = data[1]
    status_editor_token = logic.check_editor_token(school_id, editor_token)

    if status_editor_token:
        db.get_update_user_role(id)
        return await message.answer('‚úÖ–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ –†–µ–¥–∞–∫—Ç–æ—Ä–∞‚úÖ\n\n'
                                    '–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –î–ó, –∞ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ '
                                    '–∏–≤–µ–Ω—Ç—ã', reply_markup=keyboard.main_keyboard())

    elif not status_editor_token:
        return await message.answer('üõë–¢–∞–∫–æ–≥–æ –∫–æ–¥–∞ –†–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±—Ä–∞—Ç–∏—Å—å –∫ @hymiside.üõë')


@dp.callback_query_handler(text='pay')
async def donate(callback_query: types.CallbackQuery):
    """–ì—ã—ã—ã—ã—ã, –¥–æ–Ω–∞—Ç–∏–∫–∏"""
    button = types.InlineKeyboardButton(text="–ü–æ–º–æ—á—å —Å –¥–µ–Ω—å–≥–∞–º–∏", url='https://yoomoney.ru/to/4100117051898846')
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(button)

    return await callback_query.message.answer('–°–µ–π—á–∞—Å —è —Å–æ–¥–µ—Ä–∂—É –±–æ—Ç–∞ –Ω–∞ —Å–≤–æ–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å ‚Äî '
                                               '–∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–µ—Ä–≤–µ—Ä–∞, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ '
                                               '–¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞!\n\n'
                                               'ü§ç–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –î–æ–º–∞—à–∫–∞.–ë–æ—Çü§ç', reply_markup=keyboard)


@dp.callback_query_handler(text='logout')
async def logout(callback_query: types.CallbackQuery):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∫–ª–∞—Å—Å–∞ –∏ –±–æ—Ç —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ –ë–î"""
    user_id = callback_query.from_user.id
    db.get_logout(user_id)
    return await callback_query.message.answer('‚úÖ–¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞‚úÖ\n–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è '
                                               '–±–æ—Ç–æ–º ‚Äî –Ω–∞–∂–º–∏ /start.')


@dp.callback_query_handler(text='create_newsletter')
async def create_newsletter(callback_query: types.CallbackQuery):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞"""
    user_id = callback_query.from_user.id
    role = logic.check_user_role(user_id)

    if role == ['–†–µ–¥–∞–∫—Ç–æ—Ä']:
        await callback_query.message.answer('üíÅ‚Äç‚ôÇÔ∏è–¢–µ–ø–µ—Ä—å –≤–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–æ –≤ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤—å &')

    elif role == ['–ß–∏—Ç–∞—Ç–µ–ª—å']:
        return await callback_query.message.answer(
            'üôÖ‚Äç‚ôÇÔ∏è–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –ß–∏—Ç–∞—Ç–µ–ª—åüôÖ‚Äç‚ôÇÔ∏è\n–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –†–µ–¥–∞–∫—Ç–æ—Ä!'
            ' –ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –†–µ–¥–∞–∫—Ç–æ—Ä–∞" –∏ '
            '–≤–≤–µ–¥–∏ –∫–æ–¥ –†–µ–¥–∞–∫—Ç–æ—Ä–∞. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @hymiside.',
            reply_markup=keyboard.main_keyboard())
    elif not role:
        return await callback_query.message.answer('‚ùó–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω‚ùó\n –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã '
                                                   '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')


@dp.message_handler(lambda message: message.text.startswith('&'))
async def input_newsletter(message: types.Message):
    """–í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë"""
    newsletter = message.text.strip('&').strip()
    user_id = message.from_user.id
    school_id = db.return_school_id(user_id)

    all_user_id_my_class = db.return_all_user_id_my_class(*school_id)
    for user_id in all_user_id_my_class:
        await bot.send_message(user_id, newsletter)
        time.sleep(0.5)


@dp.callback_query_handler(text='view_timetable')
async def enter_timetable(callback_query: types.CallbackQuery):
    return await callback_query.message.answer('–í—ã–±–µ—Ä–∏ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–∂–º–∏ –Ω–∞'
                                               ' –∫–Ω–æ–ø–∫—Éüîò',
                                               reply_markup=keyboard.timetable())


@dp.callback_query_handler(text='Monday')
@dp.callback_query_handler(text='Tuesday')
@dp.callback_query_handler(text='Wednesday')
@dp.callback_query_handler(text='Thursday')
@dp.callback_query_handler(text='Friday')
@dp.callback_query_handler(text='Saturday')
@dp.callback_query_handler(text='Sunday')
async def watch_timetable(callback_query: types.CallbackQuery):
    list_day = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    }

    user_id = callback_query.from_user.id
    role = logic.check_user_role(user_id)
    if not role:
        return await callback_query.message.answer('‚ùó–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω‚ùó\n –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã '
                                                   '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')

    day = callback_query.data
    if day == 'Saturday' or day == 'Sunday':
        return await callback_query.message.answer('–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–πüíÅ‚Äç‚ôÇÔ∏èüìÜ',
                                                   reply_markup=keyboard.main_keyboard())
    school_id = db.return_school_id(user_id)

    all_timetable = logic.return_timetable(day, *school_id)
    count = 1
    list_timetable = []
    if not all_timetable:
        return await callback_query.message.answer('üôÖ‚Äç‚ôÇÔ∏è–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüôÖ‚Äç‚ôÇÔ∏è\n–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –æ–Ω–æ —Å–∫–æ—Ä–æ '
                                                   '–ø–æ—è–≤–∏—Ç—Å—è.', reply_markup=keyboard.main_keyboard())

    for timetable in all_timetable:
        list_timetable.append(f'{count}. {timetable.subject}  {timetable.time}')
        count += 1

    return await callback_query.message.answer(f'üìå–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {list_day[day]}üìå\n\n' + "\n".join(list_timetable),
                                               reply_markup=keyboard.main_keyboard())


@dp.callback_query_handler(text='create_new_class')
async def create_new_class(callback_query: types.CallbackQuery):
    return await callback_query.message.answer("<b>–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ</b>\n–®–∫–æ–ª–∞: "
                                               "¬´–Ω–∞–∑–≤–∞–Ω–∏–µ¬ª\n\n<b>–ü—Ä–∏–º–µ—Ä</b>\n–®–∫–æ–ª–∞: –®–∫–æ–ª–∞ 153",
                                               parse_mode=types.ParseMode.HTML)


@dp.message_handler(lambda message: message.text.startswith('–®–∫–æ–ª–∞:'))
async def input_school_name(message: types.Message):
    global school_name
    school_name = message.text[7:].strip()
    return await message.answer("<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ</b>\n–ö–ª–∞—Å—Å: ¬´–Ω–∞–∑–≤–∞–Ω–∏–µ¬ª\n\n<b>–ü—Ä–∏–º–µ—Ä</b>\n–ö–ª–∞—Å—Å: "
                                "9–ë", parse_mode=types.ParseMode.HTML)


@dp.message_handler(lambda message: message.text.startswith('–ö–ª–∞—Å—Å:'))
async def input_class_name(message: types.Message):
    class_name = message.text[7:].strip()

    editor_token = 'editor' + ''.join(random.choice(string.ascii_lowercase) for i in range(6))
    values = (school_name, class_name, editor_token)
    db.add_new_class(values)

    return await message.answer('‚úÖ–¢–≤–æ–π –∫–ª–∞—Å—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n\n'
                                f'<b>–ö–æ–¥ –†–µ–¥–∞–∫—Ç–æ—Ä–∞: {editor_token}.</b> –≠—Ç–æ—Ç –∫–æ–¥ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ç–µ–±–µ —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å '
                                f'—É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –†–µ–¥–∞–∫—Ç–æ—Ä–∞, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ '
                                f'–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏.\n–ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –≤–æ–π—Ç–∏.', parse_mode=types.ParseMode.HTML)


@dp.message_handler()
async def other(message: types.Message):
    """–û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—è–∫–∏–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç–∏–ø–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º –µ–≥–æ"""
    return await message.answer('ü§∑–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—éü§∑\nEc–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ–±—Ä–∞—Ç–∏—Å—å –∫ @hymiside.')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
